class Solution
{
public:
    stack<int> s;
    void dfs(vector<int> adj[], vector<bool> &vis, int u)
    {
        vis[u] = true;
        for (auto v : adj[u])
        {
            if (!vis[v])
                dfs(adj, vis, v);
        }
        s.push(u);
    }
    void _dfs(vector<int> tadj[], vector<bool> &vis, int u)
    {
        vis[u] = true;
        for (auto v : tadj[u])
        {
            if (!vis[v])
                _dfs(tadj, vis, v);
        }
    }

    int kosaraju(int V, vector<int> adj[])
    {

        vector<bool> vis(V, false);
        for (int i = 0; i < V; i++)
        {
            if (!vis[i])
                dfs(adj, vis, i);
        }
        vector<int> tadj[V];
        for (int i = 0; i < V; i++)
        {
            vis[i] = false;
            for (auto v : adj[i])
                tadj[v].push_back(i);
        }
        int ans = 0;
        while (!s.empty())
        {
            int x = s.top();
            s.pop();
            if (!vis[x])
            {
                ans++;
                _dfs(tadj, vis, x);
            }
        }
        return ans;
    }
};