class Solution
{
public:
    int n, m;
    int dx[8] = {-1, -1, -1, 0, 0, 1, 1, 1};
    int dy[8] = {-1, 0, 1, -1, 1, -1, 0, 1};
    void dfs(int i, int j, vector<vector<char>> &grid)
    {
        grid[i][j] = '0';
        for (int a = 0; a < 8; a++)
        {
            int x = i + dx[a];
            int y = j + dy[a];
            if (x >= 0 && x < n && y >= 0 && y < m && grid[x][y] == '1')
            {
                dfs(x, y, grid);
            }
        }
    }
    int numIslands(vector<vector<char>> &grid)
    {
        n = grid.size();
        m = grid[0].size();
        int ans = 0;
        for (int i = 0; i < n; i++)
        {
            for (int j = 0; j < m; j++)
            {
                if (grid[i][j] == '1')
                {
                    dfs(i, j, grid);
                    ans++;
                }
            }
        }
        return ans;
    }
};