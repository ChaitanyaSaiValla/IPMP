class Solution
{
public:
    vector<int> ans;
    void right(Node *root)
    {
        if (root == NULL)
        {
            return;
        }
        if (root->left == NULL && root->right == NULL)
        {
            return;
        }
        right(root->right);
        if (root->right == NULL && root->left != NULL)
        {
            right(root->left);
        }
        if (root->right != NULL || root->left != NULL)
        {
            ans.push_back(root->data);
        }
    }
    void leaves(Node *root)
    {
        if (root == NULL)
        {
            return;
        }
        if (root->left == NULL && root->right == NULL)
        {
            ans.push_back(root->data);
        }
        leaves(root->left);
        leaves(root->right);
    }
    void left(Node *root)
    {
        if (root == NULL)
        {
            return;
        }
        if (root->left != NULL || root->right != NULL)
        {
            ans.push_back(root->data);
        }
        if (root->left == NULL && root->right == NULL)
        {
            return;
        }
        left(root->left);
        if (root->left == NULL && root->right != NULL)
        {
            left(root->right);
        }
    }

    vector<int> boundary(Node *root)
    {

        if (root == NULL)
        {
            return ans;
        }
        ans.push_back(root->data);
        if (root->left == NULL && root->right == NULL)
        {
            return ans;
        }
        left(root->left);
        leaves(root);
        right(root->right);
        return ans;
    }
};