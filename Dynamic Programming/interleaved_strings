class Solution
{
public:
    bool isInterleave(string A, string B, string C)
    {
        if (A.size() + B.size() != C.size())
            return false;
        bool dp[A.size() + 1][B.size() + 1];
        for (int i = 0; i <= A.size(); i++)
        {
            for (int j = 0; j <= B.size(); j++)
            {
                if (i == 0 && j == 0)
                    dp[i][j] = true;
                else if (i == 0)
                    dp[i][j] = (dp[i][j - 1] && B[j - 1] == C[i + j - 1]);
                else if (j == 0)
                    dp[i][j] = (dp[i - 1][j] && A[i - 1] == C[i + j - 1]);
                else
                    dp[i][j] = (dp[i][j - 1] && B[j - 1] == C[i + j - 1]) || (dp[i - 1][j] && A[i - 1] == C[i + j - 1]);
            }
        }
        return dp[A.size()][B.size()];
    }
};
class Solution2
{
public:
    int dp[101][101];
    bool sol(string &s1, string &s2, string &s3, int i, int j, int k)
    {
        if (k == s3.size())
            return 1;
        if (dp[i][j] != -1)
            return dp[i][j];
        bool a = (s1[i] == s3[k] && i < s1.size() && sol(s1, s2, s3, i + 1, j, k + 1)) || (s2[j] == s3[k] && j < s2.size() && sol(s1, s2, s3, i, j + 1, k + 1));

        return dp[i][j] = a;
    }
    bool isInterleave(string A, string B, string C)
    {
        if (A.size() + B.size() != C.size())
            return false;
        memset(dp, -1, sizeof(dp));
        return sol(A, B, C, 0, 0, 0);
    }
};