class Solution
{
public: // Longest Increasing Subsequence
    int longestSubsequence(int n, int a[])
    {
        vector<int> dp(n, 1);
        for (int i = 1; i < n; i++)
        {
            for (int j = 0; j < i; j++)
            {
                if (a[i] > a[j])
                    dp[i] = max(dp[i], dp[j] + 1);
            }
        }
        return *max_element(dp.begin(), dp.end());
    }
    // Maxium Sum Increasing Subsequence
    int maxSumIS(int arr[], int n)
    {
        vector<int> dp(arr, arr + n);
        for (int i = 0; i < n; i++)
        {
            for (int j = 0; j < i; j++)
            {
                if (arr[i] > arr[j])
                    dp[i] = max(dp[i], dp[j] + arr[i]);
            }
        }
        return *max_element(dp.begin(), dp.end());
    }
};
